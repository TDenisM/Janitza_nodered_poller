"use strict";module.exports=function(u){require("source-map-support").install();var t=require("./modbus-basics"),i=require("./core/modbus-queue-core"),o=require("debug")("contribModbus:queue");u.nodes.registerType("modbus-queue-info",function(e){u.nodes.createNode(this,e),this.name=e.name,this.topic=e.topic,this.unitid=parseInt(e.unitid)||1,this.lowLowLevel=parseInt(e.lowLowLevel),this.lowLevel=parseInt(e.lowLevel),this.highLevel=parseInt(e.highLevel),this.highHighLevel=parseInt(e.highHighLevel),this.errorOnHighLevel=e.errorOnHighLevel,this.queueReadIntervalTime=e.queueReadIntervalTime||1e3,this.showStatusActivities=e.showStatusActivities,this.updateOnAllQueueChanges=e.updateOnAllQueueChanges,this.updateOnAllUnitQueues=e.updateOnAllUnitQueues,this.internalDebugLog=o;var n=this;n.queueReadInterval=null,n.updateStatusRrunning=!1,n.unitsWithQueue=new Map,t.setNodeStatusTo("waiting",n);var a=u.nodes.getNode(e.server);a&&(a.registerForModbus(n),n.initUnitQueueStates=function(){for(var e=0;e<256;e+=1)n.unitsWithQueue.set(e,{}),n.resetStates(e)},n.resetStates=function(e){e=n.unitsWithQueue.get(e);e.lowLowLevelReached=!0,e.lowLevelReached=!1,e.highLevelReached=!1,e.highHighLevelReached=!1},n.initUnitQueueStates(),n.checkLowLevelReached=function(e,t,u){var i=e.unitsWithQueue.get(u);!i.lowLevelReached&&t>e.lowLowLevel&&t<e.lowLevel&&(i.lowLevelReached=!0,t={payload:Date.now(),topic:e.topic,state:"low level reached",unitid:u,modbusClientName:a.name,bufferCommandListLength:t},e.send(t))},n.checkHighLevelReached=function(e,t,u){var i=e.unitsWithQueue.get(u);!i.highLevelReached&&t>e.lowLevel&&t>e.highLevel&&(i.highLevelReached=!0,t={payload:Date.now(),topic:e.topic,state:"high level reached",unitid:u,modbusClientName:a.name||a.id,highLevel:e.highLevel,bufferCommandListLength:t},e.errorOnHighLevel?e.error(new Error("Queue High Level Reached"),t):e.warn(t),e.send(t))},n.checkHighHighLevelReached=function(e,t,u){var i=e.unitsWithQueue.get(u);!i.highHighLevelReached&&t>e.highLevel&&t>e.highHighLevel&&(i.highHighLevelReached=!0,t={payload:Date.now(),topic:e.topic,state:"high high level reached",unitid:u,modbusClientName:a.name||a.id,highLevel:e.highLevel,highHighLevel:e.highHighLevel,bufferCommandListLength:t},e.error(new Error("Queue High High Level Reached"),t),e.send(t))},n.getStatusSituationFillColor=function(e){var t=n.unitsWithQueue.get(e),e="blue";return t.lowLevelReached&&(e="green"),t.highLevelReached&&(e=n.errorOnHighLevel?"red":"yellow"),e=t.highHighLevelReached?"red":e},n.setNodeStatusByActivity=function(e,t){n.showStatusActivities&&n.status({fill:n.getStatusSituationFillColor(n.unitid),shape:"ring",text:e?"active unit "+t+" queue items: "+e:"active (Unit-Id: "+t+") empty"})},n.readFromQueue=function(){if(!n.updateStatusRrunning){var i=n.unitid<1||255<n.unitid?1:n.unitid;if(a.bufferCommands)return new Promise(function(e,t){try{n.updateStatusRrunning=!0;var u=a.bufferCommandList.get(i).length;n.checkQueueStates(u,i),n.setNodeStatusByActivity(u,i),n.updateStatusRrunning=!1,e()}catch(e){n.updateStatusRrunning=!1,t(e)}});n.showStatusActivities&&n.setNodeStatusByActivity(null,i)}},n.checkQueueStates=function(e,t){!n.unitsWithQueue.get(t).lowLowLevelReached&&e<n.lowLowLevel&&n.resetStates(t),n.checkLowLevelReached(n,e,t),n.checkHighLevelReached(n,e,t),n.checkHighHighLevelReached(n,e,t)},n.readFromAllUnitQueues=function(){if(!n.updateStatusRrunning)return a.bufferCommands?new Promise(function(e,t){try{n.updateStatusRrunning=!0;for(var u,i=0;i<256;i+=1)(u=a.bufferCommandList.get(i).length)&&n.checkQueueStates(u,i);n.updateStatusRrunning=!1,e()}catch(e){n.updateStatusRrunning=!1,t(e)}}):void 0},n.registerModbusQueueActionsToNode=function(e){n.updateOnAllQueueChanges&&a.on("mbqueue",e),a.on("mbactive",e),a.on("mbinit",e),a.on("mbconnected",e),a.on("mberror",e),a.on("mbclosed",e),n.queueReadInterval=setInterval(e,n.queueReadIntervalTime)},n.removeModbusQueueActionsFromNode=function(e){a.removeListener("mbqueue",e),a.removeListener("mbactive",e),a.removeListener("mbinit",e),a.removeListener("mbconnected",e),a.removeListener("mberror",e),a.removeListener("mbclosed",e)},n.updateOnAllUnitQueues?(n.registerModbusQueueActionsToNode(n.readFromAllUnitQueues),t.setNodeStatusTo("active for all queues",n)):n.registerModbusQueueActionsToNode(n.readFromQueue),n.on("input",function(e){var t=n.unitid,t=e.payload.resetQueue?parseInt(e.payload.unitId):parseInt(e.payload)||n.unitid;e.payload={},e.payload.queueEnabled=a.bufferCommands,n.updateOnAllUnitQueues?(e.payload.allQueueData=!0,e.payload.queues=a.bufferCommandList):(e.payload.allQueueData=!1,e.payload.unitid=t,e.payload.queue=a.bufferCommandList.get(t)),e.payload.queueOptions={date:Date.now(),state:"queue request",modbusClientName:a.name||a.id,lowlowLevel:n.lowlowLevel,unitId:t,lowLevel:n.lowLevel,highLevel:n.highLevel,highHighLevel:n.highHighLevel},(e.payload.resetQueue||e.resetQueue)&&a.bufferCommands&&(i.initQueue(a),u.settings.verbose&&(a.warn(t="Init Queue By External Node"),o(t)),n.initUnitQueueStates(),n.showStatusActivities&&n.status({fill:"blue",shape:"ring",text:"active empty unit queue"}),e.payload.queueOptions.state="queue reset done"),n.send(e)}),n.on("close",function(e){n.updateOnAllUnitQueues?n.removeModbusQueueActionsFromNode(n.readFromAllUnitQueues):n.removeModbusQueueActionsFromNode(n.readFromQueue),t.setNodeStatusTo("closed",n),n.queueReadInterval&&clearInterval(n.queueReadInterval),n.queueReadInterval=null,a.deregisterForModbus(n.id,e)}),n.showStatusActivities||t.setNodeDefaultStatus(n))})};
//# sourceMappingURL=maps/modbus-queue-info.js.map
