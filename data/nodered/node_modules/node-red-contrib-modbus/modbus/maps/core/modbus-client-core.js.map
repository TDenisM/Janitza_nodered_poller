{"version":3,"sources":["core/modbus-client-core.js"],"names":["require","install","de","biancoroyal","modbus","core","client","internalDebug","internalDebugFSM","modbusSerialDebug","XStateFSM","stateLogEnabled","networkErrors","this","id","states","on","INIT","BREAK","STOP","broken","createStateMachineService","ACTIVATE","RECONNECT","reconnecting","createMachine","initial","OPENSERIAL","CONNECT","FAILURE","SWITCH","CLOSE","QUEUE","SEND","READ","WRITE","stopped","NEW","getActualUnitId","node","msg","Number","isInteger","payload","unitid","queueUnitId","parseInt","unit_id","startStateService","toggleMachine","interpret","start","checkUnitId","clientType","getLogFunction","EMPTY","activateSendingOnSuccess","cb","cberr","resp","then","err","empty","send","activateSendingOnFailure","sending","readModbusByFunctionCodeOne","address","quantity","coreClient","reading","Error","message","readModbusByFunctionCodeTwo","readDiscreteInputs","writing","readModbusByFunctionCodeThree","closed","readHoldingRegisters","readModbusByFunctionCodeFour","failed","readInputRegisters","readModbusByFunctionCode","fc","nodeLog","readModbus","queueLog","JSON","stringify","internalDebugLog","timeout","getTimeout","state","value","clienttype","activateSending","stateService","modbusErrorHandling","writeModbusByFunctionCodeFive","writeCoil","readCoils","length","writeCoils","getID","writeModbusByFunctionCodeSix","writeRegister","writeModbusByFunctionCodeSixteen","writeRegisters","writeModbus","info","bufferCommands","setUnitIdFromPayload","setTimeout","writeModbusByFunctionCodeFifteen","tcpHost","tcpPort","setNewSerialNodeSettings","serialPort","serialBaudrate","serialDatabits","serialStopbits","serialParity","serialType","serialConnectionDelay","setNewNodeOptionalSettings","unitId","commandDelay","clientTimeout","reconnectTimeout","setNewNodeSettings","tcpType","connectorType","messagesAllowedStates","module","exports"],"mappings":"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","file":"../../core/modbus-client-core.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020 Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n'use strict'\nrequire('source-map-support').install()\n\n// eslint-disable-next-line no-var\nvar de = de || { biancoroyal: { modbus: { core: { client: {} } } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebug = de.biancoroyal.modbus.core.client.internalDebug || require('debug')('contribModbus:core:client') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebugFSM = de.biancoroyal.modbus.core.client.internalDebugFSM || require('debug')('contribModbus:core:client:fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.modbusSerialDebug = de.biancoroyal.modbus.core.client.modbusSerialDebug || require('debug')('modbus-serial') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.XStateFSM = de.biancoroyal.modbus.core.client.XStateFSM || require('@xstate/fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.stateLogEnabled = de.biancoroyal.modbus.core.client.stateLogEnabled || false // eslint-disable-line no-use-before-define\n\nde.biancoroyal.modbus.core.client.networkErrors = ['ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNRESET', 'ENETRESET',\n  'ECONNABORTED', 'ECONNREFUSED', 'ENETUNREACH', 'ENOTCONN',\n  'ESHUTDOWN', 'EHOSTDOWN', 'ENETDOWN', 'EWOULDBLOCK', 'EAGAIN', 'EHOSTUNREACH']\n\nde.biancoroyal.modbus.core.client.createStateMachineService = function () {\n  this.stateLogEnabled = false\n\n  // failure is a general gate point in states to jump between states\n  return this.XStateFSM.createMachine({\n    id: 'modbus',\n    initial: 'new',\n    states: {\n      new: {\n        on: { INIT: 'init', BREAK: 'broken', STOP: 'stopped' }\n      },\n      broken: {\n        on: { INIT: 'init', STOP: 'stopped', FAILURE: 'failed', ACTIVATE: 'activated', RECONNECT: 'reconnecting' }\n      },\n      reconnecting: {\n        on: { INIT: 'init', STOP: 'stopped' }\n      },\n      init: {\n        on: { OPENSERIAL: 'opened', CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      opened: {\n        on: { CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      connected: {\n        on: { CLOSE: 'closed', ACTIVATE: 'activated', QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      activated: {\n        on: {\n          READ: 'reading',\n          WRITE: 'writing',\n          QUEUE: 'queueing',\n          BREAK: 'broken',\n          CLOSE: 'closed',\n          FAILURE: 'failed',\n          STOP: 'stopped',\n          SWITCH: 'switch'\n        }\n      },\n      queueing: {\n        on: {\n          ACTIVATE: 'activated',\n          SEND: 'sending',\n          READ: 'reading',\n          WRITE: 'writing',\n          EMPTY: 'empty',\n          BREAK: 'broken',\n          CLOSE: 'closed',\n          FAILURE: 'failed',\n          STOP: 'stopped',\n          SWITCH: 'switch'\n        }\n      },\n      empty: { on: { QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' } },\n      sending: { on: { ACTIVATE: 'activated', READ: 'reading', WRITE: 'writing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\n      reading: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      writing: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      closed: { on: { FAILURE: 'failed', BREAK: 'broken', CONNECT: 'connected', RECONNECT: 'reconnecting', INIT: 'init', STOP: 'stopped', SWITCH: 'switch' } },\n      failed: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped', SWITCH: 'switch' } },\n      switch: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped' } },\n      stopped: { on: { NEW: 'new', STOP: 'stopped' } }\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.getActualUnitId = function (node, msg) {\n  if (msg.payload && Number.isInteger(msg.payload.unitid)) {\n    return parseInt(msg.payload.unitid)\n  } else if (Number.isInteger(msg.queueUnitId)) {\n    return parseInt(msg.queueUnitId)\n  } else {\n    return parseInt(node.unit_id)\n  }\n}\n\nde.biancoroyal.modbus.core.client.startStateService = function (toggleMachine) {\n  return this.XStateFSM.interpret(toggleMachine).start()\n}\n\nde.biancoroyal.modbus.core.client.checkUnitId = function (unitid, clientType) {\n  if (clientType === 'tcp') {\n    return unitid >= 0 && unitid <= 255\n  } else {\n    return unitid >= 0 && unitid <= 247\n  }\n}\n\nde.biancoroyal.modbus.core.client.getLogFunction = function (node) {\n  if (node.internalDebugLog) {\n    return node.internalDebugLog\n  } else {\n    return de.biancoroyal.modbus.core.client.internalDebug\n  }\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnSuccess = function (node, cb, cberr, resp, msg) {\n  node.activateSending(msg).then(function () {\n    cb(resp, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnFailure = function (node, cberr, err, msg) {\n  node.activateSending(msg).then(function () {\n    cberr(err, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeOne = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readCoils(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeTwo = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readDiscreteInputs(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeThree = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readHoldingRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeFour = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readInputRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCode = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  switch (parseInt(msg.payload.fc)) {\n    case 1:\n      coreClient.readModbusByFunctionCodeOne(node, msg, cb, cberr)\n      break\n    case 2:\n      coreClient.readModbusByFunctionCodeTwo(node, msg, cb, cberr)\n      break\n    case 3:\n      coreClient.readModbusByFunctionCodeThree(node, msg, cb, cberr)\n      break\n    case 4:\n      coreClient.readModbusByFunctionCodeFour(node, msg, cb, cberr)\n      break\n    default:\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n      nodeLog('Function Code Unknown %s', msg.payload.fc)\n      break\n  }\n}\n\nde.biancoroyal.modbus.core.client.readModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Reading Modbus')\n    return\n  }\n\n  if (!node.bufferCommands) {\n    if (node.clienttype !== 'tcp') {\n      node.stateService.send('READ')\n    }\n  } else {\n    node.queueLog(JSON.stringify({\n      info: 'read msg via Modbus',\n      message: msg.payload,\n      queueUnitId: msg.queueUnitId,\n      timeout: node.client.getTimeout(),\n      state: node.actualServiceState.value\n    }))\n  }\n\n  node.setUnitIdFromPayload(msg)\n  node.client.setTimeout(node.clientTimeout)\n\n  try {\n    coreClient.readModbusByFunctionCode(node, msg, cb, cberr)\n  } catch (err) {\n    nodeLog(err.message)\n    node.modbusErrorHandling(err)\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFive = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (msg.payload.value) {\n    msg.payload.value = true\n  } else {\n    msg.payload.value = false\n  }\n  node.client.writeCoil(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFifteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to coil payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeCoils(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSix = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.writeRegister(parseInt(msg.payload.address), parseInt(msg.payload.value)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSixteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to register payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeRegisters(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Writing Modbus')\n    return\n  }\n\n  if (!node.bufferCommands) {\n    if (node.clienttype !== 'tcp') {\n      node.stateService.send('WRITE')\n    }\n  } else {\n    node.queueLog(JSON.stringify({\n      info: 'write msg',\n      message: msg.payload,\n      queueUnitId: msg.queueUnitId,\n      timeout: node.client.getTimeout(),\n      state: node.actualServiceState.value\n    }))\n  }\n\n  node.setUnitIdFromPayload(msg)\n  node.client.setTimeout(node.clientTimeout)\n\n  try {\n    switch (parseInt(msg.payload.fc)) {\n      case 15: // FC: 15\n        coreClient.writeModbusByFunctionCodeFifteen(node, msg, cb, cberr)\n        break\n      case 5: // FC: 5\n        coreClient.writeModbusByFunctionCodeFive(node, msg, cb, cberr)\n        break\n      case 16: // FC: 16\n        coreClient.writeModbusByFunctionCodeSixteen(node, msg, cb, cberr)\n        break\n      case 6: // FC: 6\n        coreClient.writeModbusByFunctionCodeSix(node, msg, cb, cberr)\n        break\n      default:\n        coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n        nodeLog('Function Code Unknown %s', msg.payload.fc)\n        break\n    }\n  } catch (err) {\n    nodeLog(err.message)\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\n    node.modbusErrorHandling(err)\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewTCPNodeSettings = function (node, msg) {\n  node.tcpHost = msg.payload.tcpHost || node.tcpHost\n  node.tcpPort = msg.payload.tcpPort || node.tcpPort\n  node.tcpType = msg.payload.tcpType || node.tcpType\n}\n\nde.biancoroyal.modbus.core.client.setNewSerialNodeSettings = function (node, msg) {\n  if (msg.payload.serialPort) {\n    node.serialPort = msg.payload.serialPort || node.serialPort\n  }\n\n  if (msg.payload.serialBaudrate) {\n    node.serialBaudrate = parseInt(msg.payload.serialBaudrate) || node.serialBaudrate\n  }\n\n  node.serialDatabits = msg.payload.serialDatabits || node.serialDatabits\n  node.serialStopbits = msg.payload.serialStopbits || node.serialStopbits\n  node.serialParity = msg.payload.serialParity || node.serialParity\n  node.serialType = msg.payload.serialType || node.serialType\n\n  if (msg.payload.serialConnectionDelay) {\n    node.serialConnectionDelay = parseInt(msg.payload.serialConnectionDelay) || node.serialConnectionDelay\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeOptionalSettings = function (node, msg) {\n  if (msg.payload.unitId) {\n    node.unit_id = parseInt(msg.payload.unitId) || node.unit_id\n  }\n\n  if (msg.payload.commandDelay) {\n    node.commandDelay = parseInt(msg.payload.commandDelay) || node.commandDelay\n  }\n\n  if (msg.payload.clientTimeout) {\n    node.clientTimeout = parseInt(msg.payload.clientTimeout) || node.clientTimeout\n  }\n\n  if (msg.payload.reconnectTimeout) {\n    node.reconnectTimeout = parseInt(msg.payload.reconnectTimeout) || node.reconnectTimeout\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeSettings = function (node, msg) {\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  const coreClient = de.biancoroyal.modbus.core.client\n\n  if (!msg) {\n    nodeLog('New Connection message invalid.')\n    return false\n  }\n\n  switch (msg.payload.connectorType.toUpperCase()) {\n    case 'TCP':\n      coreClient.setNewTCPNodeSettings(node, msg)\n      nodeLog('New Connection TCP Settings ' + node.tcpHost + ' ' + node.tcpPort + ' ' + node.tcpType)\n      break\n\n    case 'SERIAL':\n      coreClient.setNewSerialNodeSettings(node, msg)\n      nodeLog('New Connection Serial Settings ' + node.serialPort + ' ' + node.serialBaudrate + ' ' + node.serialType)\n      break\n\n    default:\n      nodeLog('Unknown Dynamic Reconnect Type ' + msg.payload.connectorType)\n  }\n\n  coreClient.setNewNodeOptionalSettings(node, msg)\n\n  return true\n}\n\nde.biancoroyal.modbus.core.client.messagesAllowedStates = ['activated', 'queueing', 'sending', 'empty', 'connected']\n\nmodule.exports = de.biancoroyal.modbus.core.client\n"]}