{"version":3,"sources":["modbus-basics.js"],"names":["require","install","de","biancoroyal","modbus","basics","internalDebug","util","statusLog","get_timeUnit_name","unit","unitAbbreviation","calc_rateByUnit","rate","rateUnit","parseInt","setNodeStatusProperties","statusValue","showActivities","fillValue","shapeValue","statusText","value","shape","status","setNodeStatusByResponseTo","response","node","fill","text","this","inspect","setNodeStatusResponse","length","setModbusError","modbusClient","err","msg","setNodeStatusTo","emit","message","showStatusActivities","statusOptions","setNodeDefaultStatus","onModbusConnect","onModbusActive","onModbusError","failureMsg","showErrors","warn","onModbusClose","onModbusQueue","reconnectTimeout","on","_this","onModbusInit","onModbusBroken","invalidPayloadIn","Object","prototype","hasOwnProperty","call","sendEmptyMsgOnFail","emptyMsgOnFail","name","error","Error","nodeStatus","logMsgError","buildNewMessage","keepMsgProperties","minMsg","assign","module","exports"],"mappings":"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","file":"../modbus-basics.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020 Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n'use strict'\nrequire('source-map-support').install()\n\n// eslint-disable-next-line no-var\nvar de = de || { biancoroyal: { modbus: { basics: {} } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.basics.internalDebug = de.biancoroyal.modbus.basics.internalDebug || require('debug')('contribModbus:basics') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.basics.util = de.biancoroyal.modbus.basics.util || require('util') // eslint-disable-line no-use-before-define\n\n/**\n * Modbus core node basics.\n * @module NodeRedModbusBasics\n */\nde.biancoroyal.modbus.basics.statusLog = false\n/**\n *\n * @param unit\n * @returns {string}\n */\nde.biancoroyal.modbus.basics.get_timeUnit_name = function (unit) {\n  let unitAbbreviation = ''\n\n  switch (unit) {\n    case 'ms':\n      unitAbbreviation = 'msec.'\n      break\n    case 's':\n      unitAbbreviation = 'sec.'\n      break\n    case 'm':\n      unitAbbreviation = 'min.'\n      break\n    case 'h':\n      unitAbbreviation = 'h.'\n      break\n    default:\n      break\n  }\n\n  return unitAbbreviation\n}\n\nde.biancoroyal.modbus.basics.calc_rateByUnit = function (rate, rateUnit) {\n  switch (rateUnit) {\n    case 'ms':\n      break\n    case 's':\n      rate = parseInt(rate) * 1000 // seconds\n      break\n    case 'm':\n      rate = parseInt(rate) * 60000 // minutes\n      break\n    case 'h':\n      rate = parseInt(rate) * 3600000 // hours\n      break\n    default:\n      rate = 10000 // 10 sec.\n      break\n  }\n\n  return rate\n}\n/**\n *\n * @param statusValue\n * @param showActivities\n * @returns {{fill: string, shape: string, status: *}}\n */\nde.biancoroyal.modbus.basics.setNodeStatusProperties = function (statusValue, showActivities) {\n  let fillValue = 'yellow'\n  let shapeValue = 'ring'\n\n  if (!statusValue) {\n    statusValue = 'waiting'\n  }\n\n  let statusText = statusValue.value || statusValue\n\n  switch (statusText) {\n    case 'connecting':\n      fillValue = 'yellow'\n      shapeValue = 'ring'\n      break\n\n    case 'error':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'initialized':\n    case 'init':\n      fillValue = 'yellow'\n      shapeValue = 'dot'\n      break\n\n    case 'not ready to read':\n    case 'not ready to write':\n      fillValue = 'yellow'\n      shapeValue = 'ring'\n      break\n\n    case 'connected':\n    case 'queueing':\n    case 'queue':\n      fillValue = 'green'\n      shapeValue = 'ring'\n      break\n\n    case 'timeout':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'active':\n    case 'reading':\n    case 'writing':\n    case 'active reading':\n    case 'active writing':\n      if (!showActivities) {\n        statusText = 'active'\n      }\n      fillValue = 'green'\n      shapeValue = 'dot'\n      break\n\n    case 'disconnected':\n    case 'terminated':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'stopped':\n      fillValue = 'red'\n      shapeValue = 'dot'\n      break\n\n    case 'polling':\n      fillValue = 'green'\n      if (showActivities) {\n        shapeValue = 'ring'\n      } else {\n        statusText = 'active'\n        shapeValue = 'dot'\n      }\n      break\n\n    default:\n      if (statusText === 'waiting') {\n        fillValue = 'blue'\n        statusText = 'waiting ...'\n      }\n      break\n  }\n\n  return { fill: fillValue, shape: shapeValue, status: statusText }\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusByResponseTo = function (statusValue, response, node) {\n  let fillValue = 'red'\n  let shapeValue = 'dot'\n\n  switch (statusValue) {\n    case 'initialized':\n    case 'queue':\n      fillValue = 'green'\n      shapeValue = 'ring'\n      break\n\n    case 'active':\n      fillValue = 'green'\n      shapeValue = 'dot'\n      break\n\n    default:\n      if (!statusValue || statusValue === 'waiting') {\n        fillValue = 'blue'\n        statusValue = 'waiting ...'\n      }\n      break\n  }\n\n  node.status({ fill: fillValue, shape: shapeValue, text: this.util.inspect(response, false, null) })\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusResponse = function (length, node) {\n  node.status({\n    fill: 'green',\n    shape: 'dot',\n    text: 'active got length: ' + length\n  })\n}\n\nde.biancoroyal.modbus.basics.setModbusError = function (node, modbusClient, err, msg) {\n  if (err) {\n    switch (err.message) {\n      case 'Timed out':\n        this.setNodeStatusTo('timeout', node)\n        break\n      case 'FSM Not Ready To Reconnect':\n        this.setNodeStatusTo('not ready to reconnect', node)\n        break\n      case 'Port Not Open':\n        this.setNodeStatusTo('reconnect', node)\n        modbusClient.emit('reconnect')\n        break\n      default:\n        this.internalDebug(err.message)\n        if (node.showErrors) {\n          this.setNodeStatusTo('error ' + err.message, node)\n        }\n    }\n  }\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusTo = function (statusValue, node) {\n  if (node.showStatusActivities) {\n    if (statusValue !== node.statusText) {\n      const statusOptions = this.setNodeStatusProperties(statusValue, node.showStatusActivities)\n      node.statusText = statusValue\n      node.status({\n        fill: statusOptions.fill,\n        shape: statusOptions.shape,\n        text: statusOptions.status\n      })\n    } else {\n      this.setNodeDefaultStatus(node)\n    }\n  }\n}\n\nde.biancoroyal.modbus.basics.onModbusInit = function (node) {\n  this.setNodeStatusTo('initialize', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusConnect = function (node) {\n  this.setNodeStatusTo('connected', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusActive = function (node) {\n  this.setNodeStatusTo('active', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusError = function (node, failureMsg) {\n  this.setNodeStatusTo('failure', node)\n  if (node.showErrors) {\n    node.warn(failureMsg)\n  }\n}\n\nde.biancoroyal.modbus.basics.onModbusClose = function (node) {\n  this.setNodeStatusTo('closed', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusQueue = function (node) {\n  this.setNodeStatusTo('queueing', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusBroken = function (node, modbusClient) {\n  this.setNodeStatusTo('reconnecting after ' + modbusClient.reconnectTimeout + ' msec.', node)\n}\n\nde.biancoroyal.modbus.basics.setNodeDefaultStatus = function (node) {\n  node.status({ fill: 'green', shape: 'ring', text: 'active' })\n}\n\nde.biancoroyal.modbus.basics.initModbusClientEvents = function (node, modbusClient) {\n  if (node.showStatusActivities) {\n    modbusClient.on('mbinit', () => { this.onModbusInit(node) })\n    modbusClient.on('mbqueue', () => { this.onModbusQueue(node) })\n    modbusClient.on('mbconnected', () => { this.onModbusConnect(node) })\n    modbusClient.on('mbbroken', () => { this.onModbusBroken(node, modbusClient) })\n    modbusClient.on('mbactive', () => { this.onModbusActive(node) })\n    modbusClient.on('mberror', (failureMsg) => { this.onModbusError(node, failureMsg) })\n    modbusClient.on('mbclosed', () => { this.onModbusClose(node) })\n  } else {\n    this.setNodeDefaultStatus(node)\n  }\n}\n\nde.biancoroyal.modbus.basics.invalidPayloadIn = function (msg) {\n  return !(msg && Object.prototype.hasOwnProperty.call(msg, 'payload'))\n}\n\nde.biancoroyal.modbus.basics.sendEmptyMsgOnFail = function (node, err, msg) {\n  if (node.emptyMsgOnFail) {\n    msg.payload = ''\n\n    if (err && err.message && err.name) {\n      msg.error = err\n    } else {\n      msg.error = Error(err)\n    }\n    msg.error.nodeStatus = node.statusText\n\n    node.send([msg, msg])\n  }\n}\n\nde.biancoroyal.modbus.basics.logMsgError = function (node, err, msg) {\n  if (node.showErrors) {\n    node.error(err, msg)\n  }\n}\n\nde.biancoroyal.modbus.basics.buildNewMessage = function (keepMsgProperties, msg, minMsg) {\n  if (keepMsgProperties) {\n    return Object.assign(msg, minMsg)\n  } else {\n    return minMsg\n  }\n}\n\nmodule.exports = de.biancoroyal.modbus.basics\n"]}