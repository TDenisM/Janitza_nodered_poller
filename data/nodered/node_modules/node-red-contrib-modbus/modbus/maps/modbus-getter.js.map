{"version":3,"sources":["modbus-getter.js"],"names":["module","exports","RED","require","install","mbCore","mbIOCore","mbBasics","setNodeDefaultStatus","config","nodes","createNode","this","name","unitid","internalDebugLog","adr","quantity","ModbusGetter","showStatusActivities","dataType","showErrors","getNode","ioFile","msgThruput","connection","logIOActivities","useIOForPayload","emptyMsgOnFail","node","verboseLogging","settings","setNodeStatusTo","server","modbusClient","registerForModbus","initModbusClientEvents","resp","msg","data","buildMessageWithIO","logMsgError","err","sendEmptyMsgOnFail","origMsg","getOriginalMessage","bufferMessageList","errorProtocolMsg","onModbusCommandError","emit","getObjectId","topic","id","messageId","payload","value","on","invalidPayloadIn","client","assign","newMsg","buildNewMessageObject","origMsgInput","set","buildNewMessage","keepMsgProperties","Object","onModbusCommandDone","done","clear","deregisterForModbus"],"mappings":"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","file":"../modbus-getter.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020 Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n/**\n * Modbus Getter node.\n * @module NodeRedModbusGetter\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const mbIOCore = require('./core/modbus-io-core')\n  const internalDebugLog = require('debug')('contribModbus:getter')\n\n  function ModbusGetter (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.unitid = config.unitid\n\n    this.dataType = config.dataType\n    this.adr = config.adr\n    this.quantity = config.quantity\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.msgThruput = config.msgThruput\n    this.connection = null\n\n    this.useIOFile = config.useIOFile\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n    this.useIOForPayload = config.useIOForPayload\n    this.logIOActivities = config.logIOActivities\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.keepMsgProperties = config.keepMsgProperties\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    const node = this\n    node.bufferMessageList = new Map()\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onModbusCommandDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('reading done', node)\n      }\n      node.send(mbIOCore.buildMessageWithIO(node, resp.data, resp, msg))\n      node.emit('modbusGetterNodeDone')\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      mbBasics.logMsgError(node, err, msg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n    }\n\n    node.onModbusCommandError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\n      node.errorProtocolMsg(err, origMsg)\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\n      node.emit('modbusGetterNodeError')\n    }\n\n    node.buildNewMessageObject = function (node, msg) {\n      const messageId = mbCore.getObjectId()\n      return {\n        topic: msg.topic || node.id,\n        messageId,\n        payload: {\n          value: msg.payload.value || msg.payload,\n          unitid: node.unitid,\n          fc: mbCore.functionCodeModbusRead(node.dataType),\n          address: node.adr,\n          quantity: node.quantity,\n          messageId\n        }\n      }\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        return\n      }\n\n      if (!modbusClient.client) {\n        return\n      }\n\n      const origMsgInput = Object.assign({}, msg) // keep it origin\n      try {\n        const newMsg = node.buildNewMessageObject(node, origMsgInput)\n        node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, origMsgInput, newMsg))\n        modbusClient.emit('readModbus', newMsg, node.onModbusCommandDone, node.onModbusCommandError)\n\n        if (node.showStatusActivities) {\n          mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n        }\n      } catch (err) {\n        node.errorProtocolMsg(err, origMsgInput)\n      }\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-getter', ModbusGetter)\n}\n"]}