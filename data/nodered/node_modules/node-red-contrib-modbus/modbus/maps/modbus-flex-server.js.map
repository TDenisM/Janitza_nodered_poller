{"version":3,"sources":["modbus-flex-server.js"],"names":["module","exports","RED","require","install","coreServer","mbBasics","message","payload","registers","config","nodes","createNode","this","_require","VMScript","logEnabled","internalDebugLog","serverAddress","serverPort","parseInt","responseDelay","ModbusFlexServer","delayUnit","unitId","minAddress","VM","splitAddress","name","funcGetCoil","compile","funcGetDiscreteInput","funcGetInputRegister","funcGetHoldingRegister","funcSetCoil","funcSetRegister","showErrors","verbose","buildMessage","msg","type","disableMsgOutput","node","slice","bufferFactor","send","coils","verboseLogging","alloc","settings","Buffer","registersBufferSize","coilsBufferSize","vector","vm","sandbox","run","startServer","modbusServer","ModbusRTU","ServerTCP","host","port","debug","unitID","err","error","on","close","_server","sock","stringify","address","remoteAddress","remotePort","setNodeStatusTo","showStatusActivities","setNodeDefaultStatus","writeToFlexServerMemory"],"mappings":"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","file":"../modbus-flex-server.js","sourcesContent":["/**\n Copyright (c) 2017,2018,2019,2020 Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus Server node.\n * @module NodeRedModbusServer\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const ModbusRTU = require('modbus-serial')\n  const coreServer = require('./core/modbus-server-core')\n  const mbBasics = require('./modbus-basics')\n  const internalDebugLog = require('debug')('contribModbus:flex:server')\n\n  function ModbusFlexServer (config) {\n    RED.nodes.createNode(this, config)\n    const { VM, VMScript } = require('vm2')\n\n    this.name = config.name\n    this.logEnabled = config.logEnabled\n    this.serverAddress = config.serverAddress || '0.0.0.0'\n    this.serverPort = parseInt(config.serverPort)\n    this.responseDelay = parseInt(config.responseDelay)\n    this.delayUnit = config.delayUnit\n    this.unitId = parseInt(config.unitId) || 1\n    this.minAddress = parseInt(config.minAddress) || 0\n    this.splitAddress = parseInt(config.splitAddress) || 10000\n    this.showErrors = config.showErrors\n\n    this.funcGetCoil = new VMScript(config.funcGetCoil).compile()\n    this.funcGetDiscreteInput = new VMScript(config.funcGetDiscreteInput).compile()\n    this.funcGetInputRegister = new VMScript(config.funcGetInputRegister).compile()\n    this.funcGetHoldingRegister = new VMScript(config.funcGetHoldingRegister).compile()\n\n    this.funcSetCoil = new VMScript(config.funcSetCoil).compile()\n    this.funcSetRegister = new VMScript(config.funcSetRegister).compile()\n\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    const node = this\n    node.bufferFactor = coreServer.bufferFactor\n\n    node.coilsBufferSize = parseInt(config.coilsBufferSize * coreServer.bufferFactor)\n    node.registersBufferSize = parseInt(config.registersBufferSize * coreServer.bufferFactor)\n\n    node.coils = Buffer.alloc(node.coilsBufferSize, 0)\n    node.registers = Buffer.alloc(node.registersBufferSize, 0)\n\n    node.modbusServer = null\n\n    mbBasics.setNodeStatusTo('initialized', node)\n\n    //     1...10000*  address - 1      Coils (outputs)    0   Read/Write\n    // 10001...20000*  address - 10001  Discrete Inputs    01  Read\n    // 30001...40000*  address - 30001  Input Registers    04  Read\n    // 40001...50000*  address - 40001  Holding Registers  03  Read/Write\n\n    node.vector = {}\n\n    const vm = new VM({\n      sandbox: { node }\n    })\n\n    vm.run('node.vector.getCoil = ' + config.funcGetCoil)\n    vm.run('node.vector.getDiscreteInput = ' + config.funcGetDiscreteInput)\n    vm.run('node.vector.getInputRegister = ' + config.funcGetInputRegister)\n    vm.run('node.vector.getHoldingRegister = ' + config.funcGetHoldingRegister)\n\n    vm.run('node.vector.setCoil = ' + config.funcSetCoil)\n    vm.run('node.vector.setRegister = ' + config.funcSetRegister)\n\n    node.startServer = function () {\n      try {\n        if (node.modbusServer === null) {\n          try {\n            node.modbusServer = new ModbusRTU.ServerTCP(node.vector, {\n              host: node.serverAddress,\n              port: node.serverPort,\n              debug: node.logEnabled,\n              unitID: node.unitId\n            })\n          } catch (err) {\n            node.error(err, { payload: 'server net error -> for port 502 on unix, you have to be a super user' })\n          }\n\n          node.modbusServer.on('socketError', function (err) {\n            internalDebugLog(err.message)\n            if (node.showErrors) {\n              node.warn(err)\n            }\n            mbBasics.setNodeStatusTo('error', node)\n\n            node.modbusServer.close(function () {\n              node.startServer()\n            })\n          })\n\n          node.modbusServer._server.on('connection', function (sock) {\n            internalDebugLog('Modbus Flex Server client connection')\n            if (sock) {\n              internalDebugLog('Modbus Flex Server client to ' + JSON.stringify(sock.address()) + ' from ' + sock.remoteAddress + ' ' + sock.remotePort)\n            }\n            mbBasics.setNodeStatusTo('active', node)\n          })\n        }\n\n        if (!node.showStatusActivities) {\n          mbBasics.setNodeDefaultStatus(node)\n        }\n      } catch (err) {\n        internalDebugLog(err.message)\n        if (node.showErrors) {\n          node.warn(err)\n        }\n        mbBasics.setNodeStatusTo('error', node)\n      }\n\n      if (node.modbusServer != null) {\n        internalDebugLog('Modbus Flex Server listening on modbus://' + node.serverAddress + ':' + node.serverPort)\n        mbBasics.setNodeStatusTo('initialized', node)\n      } else {\n        internalDebugLog('Modbus Flex Server isn\\'t ready')\n        mbBasics.setNodeStatusTo('error', node)\n      }\n    }\n\n    node.startServer()\n\n    node.on('input', function (msg) {\n      if (coreServer.isValidMemoryMessage(msg)) {\n        coreServer.writeToFlexServerMemory(node, msg)\n        if (msg.payload.disableMsgOutput !== 1) {\n          node.send(buildMessage(msg))\n        }\n      } else {\n        if (node.showErrors) {\n          node.error('Is Not A Valid Memory Write Message To Server', msg)\n        }\n        if (!msg.payload.disableMsgOutput) {\n          node.send(buildMessage(msg))\n        }\n      }\n    })\n\n    function buildMessage (msg) {\n      return [\n        { type: 'holding', message: msg, payload: node.registers.slice(node.splitAddress * coreServer.bufferFactor) },\n        { type: 'coils', message: msg, payload: node.coils.slice(0, node.splitAddress * coreServer.bufferFactor) },\n        { type: 'input', message: msg, payload: node.registers.slice(0, node.splitAddress * coreServer.bufferFactor) },\n        { type: 'discrete', message: msg, payload: node.coils.slice(node.splitAddress * coreServer.bufferFactor) },\n        { payload: 'request', type: 'message', message: msg }\n      ]\n    }\n\n    node.on('close', function () {\n      mbBasics.setNodeStatusTo('closed', node)\n      if (node.modbusServer._server) {\n        node.modbusServer._server.close()\n      }\n      node.modbusServer = null\n    })\n  }\n\n  try {\n    RED.nodes.registerType('modbus-flex-server', ModbusFlexServer)\n  } catch (err) {\n    internalDebugLog(err.message)\n  }\n}\n"]}